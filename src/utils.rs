use std::env;

pub fn options_from_env() -> crate::oss::Options<'static> {
    crate::oss::Options::new()
        .access_key_id(Box::leak(
            env::var("OSS_ACCESS_KEY_ID")
                .unwrap_or_default()
                .into_boxed_str(),
        ))
        .access_key_secret(Box::leak(
            env::var("OSS_ACCESS_KEY_SECRET")
                .unwrap_or_default()
                .into_boxed_str(),
        ))
        .region(Box::leak(
            env::var("OSS_REGION").unwrap_or_default().into_boxed_str(),
        ))
        .bucket(Box::leak(
            env::var("OSS_BUCKET").unwrap_or_default().into_boxed_str(),
        ))
        .sts_token(Box::leak(
            env::var("OSS_STS_TOKEN")
                .unwrap_or_default()
                .into_boxed_str(),
        ))
        .internal(
            env::var("OSS_INTERNAL")
                .unwrap_or_default()
                .parse::<bool>()
                .unwrap_or(false),
        )
        .cname(
            env::var("OSS_CNAME")
                .unwrap_or_default()
                .parse::<bool>()
                .unwrap_or(false),
        )
        .is_request_pay(
            env::var("OSS_IS_REQUEST_PAY")
                .unwrap_or_default()
                .parse::<bool>()
                .unwrap_or(false),
        )
        .secret(
            env::var("OSS_SECRET")
                .unwrap_or_default()
                .parse::<bool>()
                .unwrap_or(false),
        )
        .timeout(
            env::var("OSS_TIMEOUT")
                .unwrap_or_default()
                .parse::<u64>()
                .unwrap_or(60),
        )
}
